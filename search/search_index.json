{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Settings Documentation","text":"<p>This project provides a simple interface that you can use in place of calling <code>config()</code> to allow you to read and store config values in the database. If the value has not been updated and saved in the database then the original value from the config file will be used.</p> <p>This allows you to save your application's default state as values in config files, all stored in version control, and still allows your users to override those settings once the site is live.</p> <p>How it works:</p> <p>Set the value:</p> <pre><code>service('settings')-&gt;set('App.siteName', 'Example');</code></pre> <p>Get the value:</p> <pre><code>service('settings')-&gt;get('App.siteName');</code></pre> <p>Forget the value:</p> <pre><code>service('settings')-&gt;forget('App.siteName');</code></pre>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on its contributors to be a success. The following users have contributed in one manner or another in making this project:</p> <p> </p> <p>Made with contrib.rocks.</p>"},{"location":"basic-usage/","title":"Basic usage","text":"<p>This library uses what we call \"dot notation\" to specify the class name and the property name to use. These are joined by a dot, hence the name.</p> <p>If you have a class named <code>App</code>, and the property you are wanting to use is <code>siteName</code>, then the key would be <code>App.siteName</code>.</p>"},{"location":"basic-usage/#general","title":"General","text":"<p>To retrieve a config value use the <code>settings</code> service.</p> <pre><code>// The same as config('App')-&gt;siteName;\n$siteName = service('settings')-&gt;get('App.siteName');</code></pre> <p>In this case we used the short class name, <code>App</code>, which the <code>config()</code> method automatically locates within the <code>app/Config</code> directory. If it was from a module, it would be found there. Either way, the fully qualified name is automatically detected by the Settings class to keep values separated from config files that may share the same name but different namespaces. If no config file match is found, the short name will be used, so it can be used to store settings without config files.</p> <p>To save a value, call the <code>set()</code> method on the settings class, providing the class name, the key, and the value. Note that boolean <code>true</code>/<code>false</code> will be converted to strings <code>:true</code> and <code>:false</code> when stored in the database, but will be converted back into a boolean when retrieved. Arrays and objects are serialized when saved, and unserialized when retrieved.</p> <pre><code>service('settings')-&gt;set('App.siteName', 'My Great Site');</code></pre> <p>You can delete a value from the persistent storage with the <code>forget()</code> method. Since it is removed from the storage, it effectively resets itself back to the default value in config file, if any.</p> <pre><code>service('settings')-&gt;forget('App.siteName');</code></pre> <p>If you ever need to completely remove all settings from their persistent storage, you can use the <code>flush()</code> method. This immediately removes all settings from the database and the in-memory cache.</p> <pre><code>service('settings')-&gt;flush();</code></pre>"},{"location":"basic-usage/#contextual-settings","title":"Contextual Settings","text":"<p>In addition to the default behavior describe above, <code>Settings</code> can be used to define \"contextual settings\". A context may be anything you want, but common examples are a runtime environment or an authenticated user. In order to use a context you pass it as an additional parameter to the <code>get()</code>/<code>set()</code>/<code>forget()</code> methods; if a context setting is requested and does not exist then the general value will be used.</p> <p>Contexts may be any unique string you choose, but a recommended format for supplying some consistency is to give them a category and identifier, like <code>environment:production</code>, <code>group:superadmin</code> or <code>lang:en</code>.</p> <p>An example... Say your App config includes the name of a theme to use to enhance your display. By default your config file specifies <code>App.theme = 'default'</code>. When a user changes their theme, you do not want this to change the theme for all visitors to the site, so you need to provide the user as the context for the change:</p> <pre><code>$context = 'user:' . user_id();\nservice('settings')-&gt;set('App.theme', 'dark', $context);</code></pre> <p>Now when your filter is determining which theme to apply it can check for the current user as the context:</p> <pre><code>$context = 'user:' . user_id();\n$theme = service('settings')-&gt;get('App.theme', $context);\n\n// or using the helper\nsetting()-&gt;get('App.theme', $context);</code></pre> <p>Contexts are a cascading check, so if a context does not match a value it will fall back on general, i.e. <code>service('setting')-&gt;get('App.theme')</code>. Return value priority is as follows: \"Setting with a context &gt; Setting without context &gt; Config value &gt; null\".</p>"},{"location":"basic-usage/#using-the-helper","title":"Using the Helper","text":"<p>The helper provides a shortcut to the using the service. It must first be loaded using the <code>helper()</code> method or telling your BaseController to always load it.</p> <pre><code>helper('setting');\n\n$name = setting('App.siteName');\n// Store a value\nsetting('App.siteName', 'My Great Site');\n\n// Using the service through the helper\n$name = setting()-&gt;get('App.siteName');\nsetting()-&gt;set('App.siteName', 'My Great Site');\n\n// Forgetting a value\nsetting()-&gt;forget('App.siteName');</code></pre> <p>Note</p> <p>Due to the shorthand nature of the helper function it cannot access contextual settings.</p>"},{"location":"basic-usage/#commands","title":"Commands","text":"<p>From the <code>spark</code> command line tool you can clear all settings from the database with the <code>settings:clear</code> command.</p> <pre><code>php spark settings:clear</code></pre> <p>You will be prompted to confirm the action before it is performed.</p>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> <li>Database Migration</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require codeigniter4/settings</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/settings</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>CodeIgniter\\Settings</code> namespace to the <code>$psr4</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'CodeIgniter\\Settings' =&gt; APPPATH . 'ThirdParty/settings/src',\n];\n\n// ...</code></pre>"},{"location":"installation/#database-migration","title":"Database Migration","text":"<p>Regardless of which installation method you chose, we also need to migrate the database to add new tables.</p> <p>You can do this with the following command:</p> <pre><code>php spark migrate --all</code></pre> <p>The above command will also migrate all other packages. If you don't want to do that you can run migrate with the <code>-n</code> flag and specify the project namespace:</p> <ol> <li>For Windows: <pre><code>php spark migrate -n CodeIgniter\\Settings</code></pre></li> <li>For Unix: <pre><code>php spark migrate -n CodeIgniter\\\\Settings</code></pre></li> </ol>"},{"location":"limitations/","title":"Known Limitations","text":"<p>The following are known limitations of the library:</p> <ol> <li>You can currently only store a single setting at a time. While the <code>DatabaseHandler</code> uses a local cache to    keep performance as high as possible for reads, writes must be done one at a time.</li> <li>You can only access the first level within a property directly. In most config classes this is a non-issue,    since the properties are simple values. Some config files, like the <code>database</code> file, contain properties that    are arrays.</li> </ol>"}]}